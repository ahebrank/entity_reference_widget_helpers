<?php

/**
 * @file
 * Contains entity_reference_widget_helpers.module.
 */

use Drupal\Core\Entity\ContentEntityForm;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Field\WidgetInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\entity_reference_widget_helpers\FormGenerator;
use Drupal\Core\Entity\Entity\EntityViewDisplay;
use Drupal\Core\Url;

/**
 * Implements hook_help().
 */
function entity_reference_widget_helpers_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the entity_reference_widget_helpers module.
    case 'help.page.entity_reference_widget_helpers':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Entity Reference widget enhancements') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_field_widget_settings_summary_alter().
 */
function entity_reference_widget_helpers_field_widget_settings_summary_alter(&$summary, $context) {
  $settings = $context['widget']->getThirdPartySettings('entity_reference_widget_helpers');
  $field_definition = $context['field_definition'];
  $type = $field_definition->getType();

  if ($type == 'entity_reference') {
    if (isset($settings['use_dropdown']) && $settings['use_dropdown']) {
      if ($less_than = $settings['dropdown_if_less']) {
        $summary[] = t('Dropdown if less than @count options.', ['@count' => $less_than]);
      }
      else {
        $summary[] = t('Use dropdown');
      }
    }
    if (isset($settings['collection_link']) && $settings['collection_link']) {
      $summary[] = t('Show collection link');
    }
  }

  if ($type == 'webform') {
    if (isset($settings['collection_link']) && $settings['collection_link']) {
      $summary[] = t('Show collection link');
    }
  }

  if ($type == 'entity_reference_revisions') {
    if (isset($settings['show_paragraph_description']) && $settings['show_paragraph_description']) {
      $summary[] = t('Show description.');
    }
  }

  if ($field_definition instanceof BaseFieldDefinition
      && $field_definition->getProvider() == 'eck'
      && $field_definition->getName() == 'title') {
    if (isset($settings['eck_title_label_override']) && $settings['eck_title_label_override']) {
      $summary[] = t('Override label.');
    }
    if (isset($settings['eck_title_description_override']) && $settings['eck_title_description_override']) {
      $summary[] = t('Override description.');
    }
  }
}

/**
 * Implements hook_field_widget_third_party_settings_form().
 */
function entity_reference_widget_helpers_field_widget_third_party_settings_form(WidgetInterface $plugin, FieldDefinitionInterface $field_definition, $form_mode, $form, FormStateInterface $form_state) {
  $element = [];
  $type = $field_definition->getType();
  $settings = $plugin->getThirdPartySettings('entity_reference_widget_helpers');
  $plugin_id = $plugin->getPluginId();

  if ($type == 'entity_reference') {
    // Autocomplete or IEF.
    if ($plugin_id == 'entity_reference_autocomplete' || strpos($plugin_id, 'inline_entity_form') === 0) {
      $element['use_dropdown'] = [
        '#type' => 'checkbox',
        '#title' => t('Convert autocomplete to dropdown'),
        '#default_value' => (isset($settings['use_dropdown'])) ? $settings['use_dropdown'] : '',
      ];
      $element['dropdown_if_less'] = [
        '#type' => 'number',
        '#title' => t('Only convert autocomplete to dropdown if fewer than this many options'),
        '#default_value' => (isset($settings['dropdown_if_less'])) ? $settings['dropdown_if_less'] : '',
        '#states' => [
          'visible' => [
            ':input[name*="[entity_reference_widget_helpers][use_dropdown]"]' => ['checked' => TRUE],
          ],
        ],
      ];
    }

    // @todo: check if collection route exists
    $element['collection_link'] = [
      '#type' => 'checkbox',
      '#title' => t('Show collection link'),
      '#default_value' => (isset($settings['collection_link'])) ? $settings['collection_link'] : '',
    ];
  }

  if ($type == 'webform') {
    $element['collection_link'] = [
      '#type' => 'checkbox',
      '#title' => t('Show collection link'),
      '#default_value' => (isset($settings['collection_link'])) ? $settings['collection_link'] : '',
    ];
  }

  if ($type == 'entity_reference_revisions') {
    $element['show_paragraph_description'] = [
      '#type' => 'checkbox',
      '#title' => t('Show paragraph description'),
      '#default_value' => (isset($settings['show_paragraph_description'])) ? $settings['show_paragraph_description'] : '',
    ];
  }

  // Customization for ECK title fields.
  if ($field_definition instanceof BaseFieldDefinition
       && $field_definition->getProvider() == 'eck'
       && $field_definition->getName() == 'title') {
    $element['eck_title_label_override'] = [
      '#type' => 'textfield',
      '#title' => t('Label override'),
      '#description' => t('Replace the default "Title" label'),
      '#default_value' => (isset($settings['eck_title_label_override'])) ? $settings['eck_title_label_override'] : '',
    ];
    $element['eck_title_description_override'] = [
      '#type' => 'textfield',
      '#title' => t('Description override'),
      '#description' => t('Replace the default "Title of the entity" description'),
      '#default_value' => (isset($settings['eck_title_description_override'])) ? $settings['eck_title_description_override'] : '',
    ];
  }

  return $element;
}

/**
 * Implements hook_field_widget_form_alter().
 */
function entity_reference_widget_helpers_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  $settings = $context['widget']->getThirdPartySettings('entity_reference_widget_helpers');
  if (empty($settings)) {
    return;
  }

  $field_definition = $context['items']->getFieldDefinition();
  $field_settings = $field_definition->getSettings();
  $type = $context['items']->getFieldDefinition()->getType();

  if ($type == 'entity_reference') {
    if (isset($settings['use_dropdown']) && $settings['use_dropdown']) {
      $element = FormGenerator::useDropdown($element, $form_state, $context, $settings['dropdown_if_less']);
    }
    if (isset($settings['collection_link']) && $settings['collection_link']) {
      $element = FormGenerator::collectionLink($element, $form_state, $context);
    }

    if (isset($element['actions']['ief_add_existing'])) {
      $config = \Drupal::config('entity_reference_widget_helpers.settings');
      $args = $element['actions']['ief_add_existing']['#value']->getArguments();
      $wording = $config->get('ief_choose_wording');
      $args['@ief_choose_wording'] = $wording ? $wording : 'Choose from existing';
      $element['actions']['ief_add_existing']['#value'] = t('@ief_choose_wording @type_singular', $args);

      $entity_helper = \Drupal::service('entity_reference_widget_helpers.entity_helper');
      if ($entity_helper->countEntities($field_settings['target_type'], $field_settings['handler_settings']['target_bundles']) < 1) {
        $element['actions']['ief_add_existing']['#disabled'] = TRUE;
      }
    }
  }

  if ($type == 'webform') {
    if (isset($settings['collection_link']) && $settings['collection_link']) {
      $element = FormGenerator::collectionLink($element, $form_state, $context);
    }
  }

  if ($field_definition instanceof BaseFieldDefinition
      && $field_definition->getProvider() == 'eck'
      && $field_definition->getName() == 'title') {
    if (isset($settings['eck_title_label_override']) && $settings['eck_title_label_override']) {
      $element['value']['#title'] = t($settings['eck_title_label_override']);
    }
    if (isset($settings['eck_title_description_override']) && $settings['eck_title_description_override']) {
      $element['value']['#description'] = t($settings['eck_title_description_override']);
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function entity_reference_widget_helpers_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form_object = $form_state->getFormObject();

  // Handle paragraph add description.
  if ($form_object instanceof ContentEntityForm) {
    $form_entity = $form_object->getEntity();
    foreach (Element::children($form) as $key) {
      // Looking for paragraph references to modify the multipleitem widget.
      if (strpos($key, 'field_') !== 0) {
        continue;
      }

      $field = $form_entity->get($key);
      $field_def = $field->getFieldDefinition();
      if ($field_def->getType() == 'entity_reference_revisions') {
        $entity_display = $form_object->getFormDisplay($form_state);
        $field_display = $entity_display->getComponent($key);

        if (isset($field_display['third_party_settings'])
          && isset($field_display['third_party_settings']['entity_reference_widget_helpers'])
          && isset($field_display['third_party_settings']['entity_reference_widget_helpers']['show_paragraph_description'])
          && $field_display['third_party_settings']['entity_reference_widget_helpers']['show_paragraph_description']) {
          // Figure out the new options.
          foreach (Element::children($form[$key]['widget']['add_more']) as $add_more_key) {
            $val = $form[$key]['widget']['add_more'][$add_more_key];
            if (isset($val['#bundle_machine_name'])) {
              $bundle = $val['#bundle_machine_name'];
              $name = \Drupal::service('entity_reference_widget_helpers.entity_helper')->getParagraphDescription($bundle);
              $form[$key]['widget']['add_more'][$add_more_key]['#value'] = t('Add @type', ['@type' => $name]);
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 */
function entity_reference_widget_helpers_inline_entity_form_entity_form_alter(&$entity_form, &$form_state) {
  // Add a label at the top of IEF form to show entity type + bundle.
  $entity = $entity_form['#entity'];
  $entity_type = $entity->getEntityType();
  $entity_label = $entity_type->getLabel();
  $bundle_id = $entity->bundle();

  $bundle_label = \Drupal::entityTypeManager()
    ->getStorage($entity_type->get('bundle_entity_type'))
    ->load($bundle_id)
    ->label();

  $label = [
    '#type' => 'label',
    '#title' => t('Edit @bundle (@type)', ['@type' => $entity_label, '@bundle' => $bundle_label]),
    '#weight' => -1000,
    '#attributes' => [
      'class' => [
        'erwh__ief-form-label',
      ],
    ],
  ];

  $entity_form['erwh_form_heading'] = $label;
  $entity_form['#attached']['library'][] = 'entity_reference_widget_helpers/ief';
}

/**
 * Implements hook_field_formatter_settings_summary_alter().
 */
function entity_reference_widget_helpers_field_formatter_settings_summary_alter(&$summary, $context) {
  $plugin_id = $context['formatter']->getPluginId();

  if ($plugin_id == 'entity_reference_label') {
    if ($custom_link = $context['formatter']->getThirdPartySetting('entity_reference_widget_helpers', 'custom_label_link')) {
      $summary[] = t('Custom link: @link', ['@link' => $custom_link]);
    }
  }
}

/**
 * Implements hook_field_formatter_third_party_settings_form().
 */
function entity_reference_widget_helpers_field_formatter_third_party_settings_form($plugin, $field_definition, $view_mode, $form, FormStateInterface $form_state) {
  $element = [];
  $plugin_id = $plugin->getPluginId();

  if ($plugin_id == 'entity_reference_label') {
    $element['custom_label_link'] = [
      '#type' => 'textfield',
      '#title' => t('Custom link URL'),
      '#description' => t('Tokens may be used'),
      '#default_value' => $plugin->getThirdPartySetting('entity_reference_widget_helpers', 'custom_label_link'),
    ];
  }
  return $element;
}

/**
 * Implements hook_preprocess_field().
 */
function entity_reference_widget_helpers_preprocess_field(&$variables) {
  if ($variables['element']['#formatter'] == 'entity_reference_label') {

    $entity = $variables['element']['#object'];
    $view_mode = $variables['element']['#view_mode'];
    $field_name = $variables['element']['#field_name'];

    // Get the field formatter settings...
    $entity_display = EntityViewDisplay::collectRenderDisplay($entity, $view_mode);
    $field_display = $entity_display->getComponent($field_name);

    // Get the setting.
    if (isset($field_display['third_party_settings']['entity_reference_widget_helpers']['custom_label_link'])) {
      $custom_link = $field_display['third_party_settings']['entity_reference_widget_helpers']['custom_label_link'];

      if ($custom_link) {
        $token_mapper = \Drupal::service('token.entity_mapper');
        $parent_type = $token_mapper->getTokenTypeForEntityType($entity->getEntityType()->id());
        $field_val = $entity->get($field_name);

        foreach ($variables['items'] as $k => $child) {
          if (isset($variables['items'][$k]['content']['#url'])) {
            $target = $field_val[$k]->entity;
            $target_type = $token_mapper->getTokenTypeForEntityType($target->getEntityType()->id());

            // Token replacement for both the parent and target entity.
            $data = [
              $parent_type => $entity,
              $target_type => $target,
            ];
            $path = \Drupal::token()->replace($custom_link, $data);
            $variables['items'][$k]['content']['#url'] = Url::fromUserInput($path);
          }
        }
      }
    }
  }
}
